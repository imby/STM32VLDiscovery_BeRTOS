/**
\page short_introduction A 5 minute introduction to BeRTOS

\section installation Installing BeRTOS on your system

What do you need when developing an embedded project with BeRTOS?
\li a toolchain for your CPU
\li BeRTOS source code :)
\li supporting binaries for BeRTOS build system
\li supporting tools for BeRTOS Wizard

See the <a href="">installation instructions page</a> online for help
on installing BeRTOS on your system.

Strictly speaking, BeRTOS doesn't need to be 'installed', you can just
take .c files and compile them in your project.

However, BeRTOS is a complex system with many dependencies between modules.
It's not easy to track the dependencies for each module, so we have developed
a set of tools to make dependency tracking automatic.

Contact the <a href="http://forum.bertos.org">support forum</a> if you want
help on using BeRTOS without the supporting tools. Be warned, though, that
this method is not supported and we can only point you in the right direction.

\section organization Project's organization

Each project has its own full BeRTOS sources, configuration and HAL files.
Why? Because we think that each project has its own life and it must not
interfere with any other project.
Let's say you use a shared BeRTOS version for all of your projects. Each
time you update, you need to check that each and every project still works
correctly. We don't want to do this (and I bet you don't want either).
However, it's still easy to update a single project if you want to.

A project named Foo is organized as follows:
\li bertos/ - BeRTOS source directory
\li Makefile - BeRTOS build system Makefile
\li project.bertos - Wizard's configuration file
\li foo/ - your project's main directory
\li foo/hw/ - low level HAL files
\li foo/cfg/ - configuration directory
\li foo/foo_user.mk - makefile fragment that you can edit
\li foo/foo.mk - makefile fragment changed by the Wizard, don't edit

See <a href="">BeRTOS HAL system</a> for more information on HAL files.

\section coding Coding guidelines

Don't change configuration settings by hand, use the Wizard. This is because
sometimes there are more actions to be done than simply changing a value.

Include configuration files using "..." rather than <...> style, otherwise you
will use default configuration values instead of your project's values.

*/

/*!
<!--
This document is automatically processed by Doxygen (http://www.doxygen.org/).
Don't remove special formatting tags.
This section won't be processed unless enabled.

See STATUS for further information and tips about Doxygen tags.
-->


\mainpage

\section overview Overview

BeRTOS is a real-time operating system designed for building applications
for embedded systems, like reference boards, test boards, or custom boards.

It has a modular structure: its components can be used in very different
environments, from 8-bit processor to Linux and Win32 hosted application
(for debug purpose), using a wide range of compilers.

\section history History and Motivation

BeRTOS was born as a extremely modular, highly optimized and fine-tuned
operating system for embedded programming.
As a result, each module has its own scope and can be used alone or in
cooperation with other modules.
It's even possible to use most of the drivers without activating the kernel module.

We have grown it following our guidelines: simplicity and beauty.
These guidelines made it possible to evolve it in a full-featured real
time operating system, with more modularity than many other embedded OSes,
without giving up reliability and performace.

To achieve the highest possible reusability, most BeRTOS components are
designed for fine-grained modularity and minimal external dependencies.
Most non-essential features can be configured out for applications with small
memory footprint requirements.

\section features Features

  - multitasking kernel with IPC, semaphores, priority levels;
  - a comprehensive set of generic drivers for a wide range of devices,
    which can be easily customized to the actual hardware: timer, serial,
    adc, ntc, pwm, stepper motors, dc motors, lcd, keyboards, buzzer, eeprom;
  - full graphic subsystem for simple displays, with font support, bitmaps,
    clipping, text formatting, interactive menus;
  - simple console with command parser;
  - readline-like support for command history;
  - entropy generator and random numbers generator optimized for embedded
    systems;
  - checksumming and hashing functions (CRC, MD2);
  - full hash-table implementation with double-hashing collision resolution;
  - XMODEM protocol implementation;
  - RLE compression algorithm;

\section structure Directory Structure

The modules are sorted in subdirectories by their category:

  - app/            : demo applications;
  - bertos/algo/    : algorithms;
  - bertos/cfg/     : configuration stuff;
  - bertos/drv/     : hardware drivers;
  - bertos/dt/	    : experimental object oriented gui toolkit;
  - bertos/emul/    : Qt-based emulator framework for embedded applications;
  - bertos/fonts/   : fonts;
  - bertos/fs/      : file system related stuff;
  - bertos/gfx/     : general purpose graphics routines;
  - bertos/gui/     : widgets for simple displays;
  - bertos/hw/	    : hardware-specific declarations;
  - bertos/icons/   : conversion tool from image TXT format to LCD bitmap;
  - bertos/kern/    : multitasking kernel;
  - bertos/mware/   : algorithms, other standalone code;
  - bertos/struct/  : containers and other data structures;
  - bertos/os/	    : OS-abstraction layers for hosted environments;
  - doc/            : documentation;

The top-level directory contains a few support headers that are meant to be
usable by any C/C++ embedded or hosted application.

See the \ref dev_status page for information about the various drivers.

\section license License

BeRTOS is provided under the term of the GNU General Public License
(see LICENSE.GPL) with following exception:

\verbatim

As a special exception, you may use this file as part of a free software
library without restriction.  Specifically, if other files instantiate
templates or use macros or inline functions from this file, or you compile
this file and link it with other files to produce an executable, this
file does not by itself cause the resulting executable to be covered by
the GNU General Public License.  This exception does not however
invalidate any other reasons why the executable file might be covered by
the GNU General Public License.

\endverbatim

*/
